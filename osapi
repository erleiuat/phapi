#!/usr/bin/env php
<?php

require_once getcwd() . '/_osapi/constants.php';
require_once(OA_MODULE . 'Dotenv.php');
require_once(OA_MODULE . 'Loader.php');
Dotenv::load(OA_ENV_FILE);
Loader::req('CONFðŸ¦„/' . ðŸŒˆENV);
Loader::req('MODðŸ¦„/DB/' . ðŸŒˆDB_ENGINE);

$args = $argv;
array_shift($args);
define('EOL', PHP_EOL);
define('EOL2', EOL . EOL);
define('TB', "\t");
define('TL', str_repeat("â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”", 5));

if (!array_key_exists(0, $args)) return false;
if (in_array($args[0], ['migrate', 'm'])) {

  if (!DB::connect(false)) {

    DB::$con = new mysqli(
      ðŸŒˆDB_SERVER,    // host
      ðŸŒˆDB_USER,      // username
      ðŸŒˆDB_PASSWORD,  // password
      null,             // database
      ðŸŒˆDB_PORT,      // port
    );

    if (DB::getCon()->connect_error) die('Unable to connect to server.');
    $sql = 'CREATE DATABASE ' . ðŸŒˆDB_DATABASE;
    if (DB::exec($sql, false)) echo 'Database created successfully';
    else echo 'Error creating database: ' . $conn->error;
  }

  function getFiles($dirScan, $path) {
    if (!$dirScan) return [];
    $tmpFiles = [];
    foreach ($dirScan as $value) {
      $parts = explode('.', $value);
      if (end($parts) == 'json') array_push($tmpFiles, $path . $value);
    }
    return $tmpFiles;
  }

  function getFileTables($file, $defaultRow) {
    $data = json_decode(file_get_contents($file), true);
    $tables = [];
    foreach ($data as $table) {
      if (count($table) < 1) continue;
      $rows = [];
      foreach ($table['rows'] as $row => $info)
        $rows[$row] = array_merge($defaultRow, $info);
      $tables[$table['name']] = [
        'type' => array_key_exists('type', $table) ? strtoupper($table['type']) : 'TABLE',
        'position' => array_key_exists('position', $table) ? $table['position'] : null,
        'rows' => $rows,
      ];
    }
    return $tables;
  }

  $defaultTable = [
    'position' => null,
    'rows' => null,
  ];

  $defaultRow = [
    'type' => 'VARCHAR(255)',
    'null' => true,
    'auto' => false,
    'unsigned' => false,
    'primary' => false,
    'unique' => false,
    'default' => null,
    'reference' => null,
    'on_update' => null,
  ];

  $defaultStamps = [
    'x_created_at' => [
      'type' => 'TIMESTAMP',
      'default' => 'CURRENT_TIMESTAMP',
      'null' => false
    ],
    'x_updated_at' => [
      'default' => 'NULL',
      'on_update' => 'CURRENT_TIMESTAMP',
      'type' => 'TIMESTAMP'
    ]
  ];

  $path_core = OA_CORE_DB;
  $path_user = OA_BASE_PATH . ðŸŒˆPATH_DB_DEFINITIONS . '/';

  $files = [];
  $files = array_merge($files, getFiles(scandir($path_core), $path_core));
  $files = array_merge($files, getFiles(scandir($path_user), $path_user));

  $tables = [];
  foreach ($files as $file)
    $tables = array_merge($tables, getFileTables($file, $defaultRow));

  # $sqls = []; // TODO ?

  foreach ($tables as $tb => $info) {
    $name = ðŸŒˆDB_TABLE_PREFIX . $tb;
    $uniques = [];
    $rows = [];

    if (!array_key_exists('no_stamps', $info))
      $info['rows'] = array_merge($info['rows'], $defaultStamps);

    foreach ($info['rows'] as $row => $props) {
      $fr = array_merge($defaultRow, $props);
      if ($fr['unique']) array_push($uniques, 'UNIQUE INDEX unique_' . $row . ' (' . $row . ')');
      array_push(
        $rows,
        '' .
          ($row . ' ') .
          ($fr['type']) .
          ($fr['null'] ? '' : ' NOT NULL') .
          ($fr['default'] !== null ? " DEFAULT " . $fr['default'] . "" : '') .
          ($fr['auto'] ? " AUTO_INCREMENT" : '') .
          ($fr['primary'] ? " PRIMARY KEY" : '') .
          ($fr['reference'] ? " REFERENCES " . ðŸŒˆDB_TABLE_PREFIX . $fr['reference']['table'] . "(" . $fr['reference']['row'] . ")" : '') .
          ($fr['on_update'] ? " ON UPDATE " . $fr['on_update'] . "" : '')
      );
    }

    $sql = "DROP TABLE IF EXISTS " . $name;
    echo EOL . TL . '> ' . $info['type'] . TB . $name . EOL2 . $sql;
    if (DB::exec($sql . ';', false)) echo ' -> Tables dropped successfully' . EOL;
    else echo ' -> Error dropping tables: ' . DB::getCon()->error . EOL;

    $sql =
      "CREATE TABLE " . $name . " (" . EOL2 . TB .
      implode(',' . EOL . TB, $rows) .
      ($uniques ? ',' . EOL : '') . EOL . TB .
      implode(',' . EOL . TB, $uniques) . EOL .
      ")";

    echo EOL . $sql;
    if (DB::exec($sql . ';', false)) echo ' -> Tables created successfully' . EOL;
    else {
      echo ' -> Error creating tables: ' . DB::getCon()->error . EOL;
      die();
    }
  }
}
